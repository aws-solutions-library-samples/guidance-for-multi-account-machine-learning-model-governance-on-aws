AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for creating SageMaker Domain and User Profile in Hub Account'

# Step 1d: CFN for creating SM domain, user-profile in test account 
# The SM execution role has permission to access S3 bucket in hub account

Parameters:
  DomainName:
    Type: String
    Description: Name of the SageMaker Domain
  UserProfileName:
    Type: String
    Description: Name of the User Profile
    # todo: get it through variables from stackset later. 
    # For now for easiness, take hub accountid and buh S3 bucket where modek artifacts are stored as paramss
  HubAccountId:
    Type: String
    Description: Account ID of the hub account 
  HubS3BucketName:
    Type: String
    Description: Name of the S3 bucket in the hub account 

Resources:
  
  SageMakerDomain:
    Type: AWS::SageMaker::Domain
    Properties:
      DomainName: !Ref DomainName
      AuthMode: IAM
      DefaultUserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
      AppNetworkAccessType: PublicInternetOnly
      VpcId: !Ref SageMakerVPC
      SubnetIds: 
        - !Ref SageMakerSubnet

  SageMakerUserProfile:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId: !GetAtt SageMakerDomain.DomainId
      UserProfileName: !Ref UserProfileName
      UserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  JupyterAppSpace:
    DependsOn:
      - SageMakerUserProfile
      - SageMakerDomain
    Type: AWS::SageMaker::Space
    Properties:
      DomainId: !GetAtt SageMakerDomain.DomainId
      OwnershipSettings:
        OwnerUserProfileName: !Select [2, !Split ["/", !GetAtt SageMakerUserProfile.UserProfileArn ]]
      SpaceDisplayName: sagemaker-space
      SpaceName: sagemaker-space
      SpaceSettings:
        AppType: JupyterLab
        JupyterLabAppSettings:
          # CodeRepositories: 
            # - RepositoryUrl: https://github.com/aws-solutions-library-samples/guidance-for-multi-account-machine-learning-model-governance-on-aws.git
          DefaultResourceSpec:
            InstanceType: ml.t3.large
        SpaceStorageSettings:
          EbsStorageSettings:
            EbsVolumeSizeInGb: 50
      SpaceSharingSettings:
        SharingType: Private
    

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TestSpokeAccountSagemakerExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: "ram-resource-permissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ram:GetPermission"
                  - "ram:ListPermissions"
                  - "ram:GetResourceShareAssociations"
                  - "ram:ListResourceSharePermissions"
                  - "ram:DeleteResourceShare"
                  - "ram:GetResourceShareInvitations"
                  - "ram:AcceptResourceShareInvitation"
                Resource: 
                  - !Sub "arn:aws:ram:${AWS::Region}:${AWS::AccountId}:resource-share/*"
                  - !Sub "arn:aws:ram:${AWS::Region}:${AWS::AccountId}:resource-share-invitation/*"
                  - !Sub "arn:aws:ram::${AWS::AccountId}:permission/*"
                  - !Sub "arn:aws:ram:${AWS::Region}:${AWS::AccountId}:permission/*"
        - PolicyName: "cross-account-s3-permissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Sub 'arn:aws:s3:::sagemaker-${AWS::Region}-${HubAccountId}-${HubS3BucketName}'
                  - !Sub 'arn:aws:s3:::sagemaker-${AWS::Region}-${HubAccountId}-${HubS3BucketName}/*'


  SageMakerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: SageMaker VPC

  SageMakerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SageMakerVPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SageMaker Subnet



# API Gateway and Lambda resources to invoke Sagemaker model endpoint
  # Lambda Function
  InvokeModelEndpointLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvokeModelEndpointLambda
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: # placeholder code for now, change it to call sagemaker endpoint
        ZipFile: |
          import json

          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Python Lambda!') 
              }
      Runtime: python3.9

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # API Gateway
  InvokeModelEndpointApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: InvokeModelEndpointApiGateway
      Description: API Gateway for invoking Lambda function

  # API Gateway Resource
  InvokeModelEndpointApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref InvokeModelEndpointApiGateway
      ParentId: !GetAtt InvokeModelEndpointApiGateway.RootResourceId
      PathPart: 'myresource'

  # API Gateway Method
  InvokeModelEndpointApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref InvokeModelEndpointApiGateway
      ResourceId: !Ref InvokeModelEndpointApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt InvokeModelEndpointLambda.Arn

  # API Gateway Deployment
  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: InvokeModelEndpointApiMethod
    Properties:
      RestApiId: !Ref InvokeModelEndpointApiGateway
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref InvokeModelEndpointLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${InvokeModelEndpointApiGateway}/*/GET/myresource
  
  SMEndPointStateChangeEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SageMakerEndointStateChangeRule
      Description: "Rule to capture SageMaker endpoint state changes"
      EventPattern:
        source:
          - "aws.sagemaker"
        detail-type:
          - "SageMaker Endpoint State Change"
        detail:
          EndpointStatus:
            - "IN_SERVICE"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SmEndpointStateTrackLambdaFunction.Arn
          Id: "TargetLambdaFunction"

  SmEndpointStateTrackLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SmEndpointStateTrackLambdaFunction
      Runtime: python3.12
      Environment:
        Variables:
          HUB_ACCOUNT: !Ref HubAccountId
          MODEL_DYANMO_TABLE: sagemakermodelendpoints
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRoleSmEndpoint.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          def lambda_handler(event, context):
              # Extract endpoint name from the event
              endpoint_name = event['detail']['EndpointName']
              tags = event['detail']['Tags']
              if tags.get("MODEL_PACKAGE_ARN"):
                  # Prepare data for DynamoDB
                  item = {
                      'endpointname': endpoint_name,
                      'modelpackagearn': tags.get("MODEL_PACKAGE_ARN"),
                      'accountid': event['account'],
                  }
                  
                  # Assume role in the other account
                  sts = boto3.client('sts')
                  assumed_role = sts.assume_role(
                      RoleArn=f"arn:aws:iam::{os.environ['HUB_ACCOUNT']}:role/SageMakerModelEndpointMetricsDDBRole",
                      RoleSessionName='AssumeRoleSession'
                  )
                  
                  # Create DynamoDB client for the other account
                  dynamodb = boto3.resource(
                      'dynamodb',
                      aws_access_key_id=assumed_role['Credentials']['AccessKeyId'],
                      aws_secret_access_key=assumed_role['Credentials']['SecretAccessKey'],
                      aws_session_token=assumed_role['Credentials']['SessionToken'],
                      region_name=event['region']
                  )
                  
                  # Update DynamoDB table in the other account
                  table = dynamodb.Table(os.environ['MODEL_DYANMO_TABLE'])
                  table.put_item(Item=item)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Successfully updated DynamoDB')
              }

  LambdaExecutionRoleSmEndpoint:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SMEndpoint
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub 'arn:aws:iam::${HubAccountId}:role/SageMakerModelEndpointMetricsDDBRole'

  CloudWatchCrossAccountSharingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${HubAccountId}:root'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchCrossAccountAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricData'
                  - 'cloudwatch:ListMetrics'
                  - 'cloudwatch:GetMetricStatistics'
                Resource: '*'

  # CloudWatchCrossAccountSharing:
  #   Type: 'AWS::CloudWatch::CrossAccountSharing'
  #   Properties:
  #     AccountId: !Ref HubAccountId
  #     RoleArn: !Ref HubAccountRoleArn

Outputs:
  DomainId:
    Description: ID of the created SageMaker Domain
    Value: !GetAtt SageMakerDomain.DomainId
    Export:
      Name: SagemakerDomainId
  UserProfileArn:
    Description: ARN of the created User Profile
    Value: !GetAtt SageMakerUserProfile.UserProfileArn
    Export:
      Name: SagemakerUserProfileArn
  TestSpokeSageMakerExecutionRole:
    Description: Name of the SageMaker Execution Role
    Value: TestSpokeAccountSagemakerExecutionRole
    Export:
      Name: TestSpokeSageMakerExecutionRole
  ApiGatewayUrl:
    Description: URL of the API Gateway endpoint
    Value: !Sub https://${InvokeModelEndpointApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/myresource
