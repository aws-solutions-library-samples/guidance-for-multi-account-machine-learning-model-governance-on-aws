Transform: AWS::Serverless-2016-10-31
Description: 'CloudFormation template for SageMaker metrics collection, Model Package State Change Event Capture and setup for dashboard in Amazon QuickSight SO9561'
Parameters:
  AthenaCatalogName:
    Description: This is the name of the lambda function that will be created. This
      name must satisfy the pattern ^[a-z0-9-_]{1,64}$
    Type: String
    Default: dynamodb-athena-connector
    AllowedPattern: ^[a-z0-9-_]{1,64}$
  SpillBucket:
    Description: The name of the bucket where this function can spill data.
    Type: String
    Default: athena-spill-2
  SpillPrefix:
    Description: The prefix within SpillBucket where this function can spill data.
    Type: String
    Default: athena-spill
  LambdaTimeout:
    Description: Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)
    Default: 900
    Type: Number
  LambdaMemory:
    Description: Lambda memory in MB (min 128 - 3008 max).
    Default: 3008
    Type: Number
  LambdaRole:
    Description: (Optional) A custom IAM role to be used by the Connector lambda
    Type: String
    Default: ''
  DisableSpillEncryption:
    Description: 'WARNING: If set to ''true'' encryption for spilled data is disabled.'
    Default: 'false'
    Type: String
  KMSKeyId:
    Description: (Optional) By default any data that is spilled to S3 is encrypted
      using AES-GCM and a randomly generated key. Setting a KMS Key ID allows your
      Lambda function to use KMS for key generation for a stronger source of encryption
      keys.
    Type: String
    Default: ''
  PermissionsBoundaryARN:
    Description: (Optional) An IAM policy ARN to use as the PermissionsBoundary for
      the created Lambda function's execution role
    Default: ''
    Type: String
  QuickSightUserName:
    Description: The QuickSight username that to be used to create the Datasource and Dataset (it can be retrieved with the aws cli command - aws quicksight list-users --aws-account-id YOUR_AWS_ACCOUNT_ID --namespace default)
    Default: ''
    Type: String
  
  DevSpokeId:
    Type: String
    Description: AWS account ID of Dev account to which model package is shared

  TestSpokeId:
    Type: String
    Description: AWS account ID of Test account to which model package is shared

Conditions:
  HasKMSKeyId:
    Fn::Not:
    - Fn::Equals:
      - Ref: KMSKeyId
      - ''
  NotHasLambdaRole:
    Fn::Equals:
    - Ref: LambdaRole
    - ''
  HasPermissionsBoundary:
    Fn::Not:
    - Fn::Equals:
      - Ref: PermissionsBoundaryARN
      - ''
  CreateKMSPolicy:
    Fn::And:
    - Condition: HasKMSKeyId
    - Condition: NotHasLambdaRole
  IsRegionBAH:
    Fn::Equals:
    - Ref: AWS::Region
    - me-south-1
  IsRegionHKG:
    Fn::Equals:
    - Ref: AWS::Region
    - ap-east-1

Resources:

  ModelEndpointsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sagemakermodelendpoints
      AttributeDefinitions:
        - AttributeName: endpointname
          AttributeType: S
      KeySchema:
        - AttributeName: endpointname
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CrossAccountAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SageMakerModelEndpointMetricsDDBRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${DevSpokeId}:root'
                - !Sub 'arn:aws:iam::${TestSpokeId}:root'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBPutItemAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !GetAtt ModelEndpointsDynamoDBTable.Arn

# Dynamodb-Athena Connector

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${SpillBucket}-${AWS::Region}-${AWS::AccountId}'
      AccessControl: Private
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

  ConnectorConfig:
    DependsOn:
      - S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          disable_spill_encryption:
            Ref: DisableSpillEncryption
          spill_bucket:
            Ref: S3Bucket
          spill_prefix:
            Ref: SpillPrefix
          kms_key_id:
            Fn::If:
            - HasKMSKeyId
            - Ref: KMSKeyId
            - Ref: AWS::NoValue
      FunctionName:
        Ref: AthenaCatalogName
      PackageType: Image
      ImageUri:
        Fn::Sub:
        - ${Account}.dkr.ecr.${AWS::Region}.amazonaws.com/athena-federation-repository-dynamodb:2024.42.3
        - Account:
            Fn::If:
            - IsRegionBAH
            - '084828588479'
            - Fn::If:
              - IsRegionHKG
              - 183295418215
              - 292517598671
      Description: Enables Amazon Athena to communicate with DynamoDB, making your
        tables accessible via SQL
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemory
      Role:
        Fn::If:
        - NotHasLambdaRole
        - Fn::GetAtt:
          - FunctionRole
          - Arn
        - Ref: LambdaRole
  FunctionRole:
    Condition: NotHasLambdaRole
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
        - HasPermissionsBoundary
        - Ref: PermissionsBoundaryARN
        - Ref: AWS::NoValue
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole

  FunctionExecutionPolicy:
    Condition: NotHasLambdaRole
    DependsOn:
      - ModelPackageStateChangesTable
      - MetricsTable
      - ModelEndpointsDynamoDBTable
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: FunctionExecutionPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:PartiQLSelect
          Effect: Allow
          Resource: 
            - !GetAtt ModelPackageStateChangesTable.Arn
            - !GetAtt MetricsTable.Arn
            - !GetAtt ModelEndpointsDynamoDBTable.Arn
        - Action:
          - glue:GetTableVersions
          - glue:GetPartitions
          - glue:GetTables
          - glue:GetTableVersion
          - glue:GetDatabases
          - glue:GetTable
          - glue:GetPartition
          - glue:GetDatabase
          - athena:GetQueryExecution
          - dynamodb:ListTables
          Effect: Allow
          Resource: '*'
        - Action:
          - s3:GetObject
          - s3:ListBucket
          - s3:GetBucketLocation
          - s3:GetObjectVersion
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:GetLifecycleConfiguration
          - s3:PutLifecycleConfiguration
          - s3:DeleteObject
          Effect: Allow
          Resource:
          - Fn::Sub:
            - arn:${AWS::Partition}:s3:::${bucketName}
            - bucketName:
                Ref: S3Bucket
          - Fn::Sub:
            - arn:${AWS::Partition}:s3:::${bucketName}/*
            - bucketName:
                Ref: S3Bucket
      Roles:
      - Ref: FunctionRole

  FunctionKMSPolicy:
    Condition: CreateKMSPolicy
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: FunctionKMSPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - kms:GenerateRandom
          Effect: Allow
          Resource: '*'
        - Action:
          - kms:GenerateDataKey
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKeyId}
      Roles:
      - Ref: FunctionRole

# DynamoDB table, event rule, lambda
  MetricsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: sagemakerendpointmetrics
      AttributeDefinitions:
        - AttributeName: endpointarn
          AttributeType: S
      KeySchema:
        - AttributeName: endpointarn
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ModelPackageStateChangesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: modelpackagestatechanges
      AttributeDefinitions:
        - AttributeName: modelpackagearn
          AttributeType: S
        # - AttributeName: modelstage
          # AttributeType: S
      KeySchema:
        - AttributeName: modelpackagearn
          KeyType: HASH
        # - AttributeName: modelstage
          # KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ModelPackageStateChangeCapture:*"
        - PolicyName: SageMakerCloudWatchDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sagemaker:DescribeEndpoint'
                  - 'sagemaker:DescribeEndpointConfig'
                  - 'sagemaker:DescribeModelPackage'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                Resource:
                  - !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/*'
                  - !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint-config/*'
                  - !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:model-package/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*'
        - PolicyName: SageMakerStarReserouces
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sagemaker:ListEndpoints'
                  - 'cloudwatch:GetMetricData'
                  - 'cloudwatch:ListMetrics'
                Resource: '*'

  MetricsCollectorFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SageMakerMetricsCollector
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import time
          import json
          import logging
          from decimal import Decimal

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          model_metrics = {
              "/aws/sagemaker/Endpoints": {
                  "CPUUtilization": {
                      "title": "CPUUtilization",
                      "Stat": "Average",
                      "Unit": "Percent",
                  }
              },
              "AWS/SageMaker": {
                  "invocations": {
                      "title": "Invocations",
                      "Stat": "Average",
                  },
                  "latency": {
                      "title": "ModelLatency",
                      "Stat": "Maximum",
                  },
                  "DiskUtilization": {
                      "title": "DiskUtilization",
                      "Stat": "Maximum",
                  },
              },
              "aws/sagemaker/Endpoints/model-metrics": {
                  "precision": {
                      "title": "Precision",
                      "Stat": "Maximum",
                  },
                  "accuracy": {
                      "title": "Accuracy",
                      "Stat": "Maximum",
                  },
                  "f2": {
                      "title": "F2Score",
                      "Stat": "Maximum",
                  },
                  "total_number_of_violations": {
                      "title": "TotalViolations",
                      "Stat": "Maximum",
                  },
              },
          }

          dynamodb_table_columns = [
              "EndpointName",
              "CPUUtilization",
              "Invocations",
              "ModelLatency",
              "DiskUtilization",
              "Precision",
              "Accuracy",
              "F2Score",
              "TotalViolations",
          ]


          def handler(event, context):
              session = boto3.Session()
              cloudwatch = session.client("cloudwatch")
              dynamodb = session.resource("dynamodb")
              table = dynamodb.Table("sagemakerendpointmetrics")

              paginator = cloudwatch.get_paginator("list_metrics")

              pagination_config = {"IncludeLinkedAccounts": True}

              metrics_to_be_collected = dict()
              for namespace in model_metrics.keys():
                  for page in paginator.paginate(Namespace=namespace, **pagination_config):
                      for index, metric in enumerate(page["Metrics"]):
                          metric_name = metric["MetricName"]
                          if metric_name in model_metrics[namespace].keys():
                              if page["OwningAccounts"][index] not in metrics_to_be_collected:
                                  metrics_to_be_collected[page["OwningAccounts"][index]] = {}
                              endpoint_name = ""
                              dimensions = metric["Dimensions"]
                              for dimension in dimensions:
                                  if dimension["Name"] == "EndpointName":
                                      endpoint_name = dimension["Value"]
                              if endpoint_name not in metrics_to_be_collected[page["OwningAccounts"][index]]:
                                  metrics_to_be_collected[page["OwningAccounts"][index]][endpoint_name] = {}
                              metrics_to_be_collected[page["OwningAccounts"][index]][endpoint_name][metric_name] = {
                                  "Namespace": metric["Namespace"],
                                  "MetricName": metric_name,
                                  "Dimensions": metric["Dimensions"],
                              }
              current_time = int(time.time())
              start_time = current_time - (60 * 15)
              period_in_seconds = 60 * 15
              for account, endpoints in metrics_to_be_collected.items():
                  for endpoint, metrics in endpoints.items():
                      MetricDataQueries = [] 
                      logger.info(f"Collecting metrics for account: {account}, endpoint: {endpoint}")
                      for metric_name, metric in metrics.items():
                          query = {
                                  "Id": metric_name.lower(),
                                  "AccountId": account,
                                  "MetricStat": {
                                      "Metric": metric,
                                      "Period": period_in_seconds,
                                      "Stat": model_metrics[metric["Namespace"]][metric["MetricName"]][
                                          "Stat"
                                      ],
                                  },
                              }
                          unit = model_metrics[metric["Namespace"]][metric["MetricName"]].get("Unit")
                          if unit:
                              query["MetricStat"]["Unit"] = unit
                          MetricDataQueries.append(query)
                      metrics_results = cloudwatch.get_metric_data(
                          MetricDataQueries=MetricDataQueries,
                          StartTime=start_time,
                          EndTime=current_time,
                      )
                      endpoints_data = {}
                      for res in metrics_results["MetricDataResults"]:
                          labels = res["Label"].split(" ")
                          namespace = labels[0]
                          metric_name = labels[-1]
                          if namespace not in model_metrics.keys():
                              for ns in model_metrics.keys():
                                  if metric_name in model_metrics[ns].keys():
                                      namespace = ns
                          endpoint_name = endpoint
                          if endpoint_name not in endpoints_data:
                              endpoints_data[endpoint_name] = {}
                          endpoints_data[endpoint_name]["endpointarn"] = endpoint_name
                          endpoints_data[endpoint_name]["AccountId"] = str(account)
                          endpoints_data[endpoint_name]["Timestamp"] = current_time
                          endpoints_data[endpoint_name][model_metrics[namespace][metric_name]["title"]] = Decimal(str(res["Values"][0])) if res["Values"] else 0
                      for endpoint_name, item in endpoints_data.items():
                          for col in dynamodb_table_columns:
                              if col not in item:
                                  item[col] = 0
                          table.put_item(Item=item)

              return {
                  "statusCode": 200,
                  "body": json.dumps("Metrics collected and stored successfully"),
              }


          if __name__ == "__main__":
              handler(None, None)

      Runtime: python3.12
      Timeout: 300
      MemorySize: 256

  ModelPackageStateChangeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ModelPackageStateChangeCapture
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          from botocore.exceptions import ClientError
          from boto3.dynamodb.conditions import Key
          import logging

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('modelpackagestatechanges')
          sagemaker_client = boto3.client('sagemaker')

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              # cfr https://docs.aws.amazon.com/sagemaker/latest/dg/automating-sagemaker-with-eventbridge.html#eventbridge-model-package
              # try:
                  logger.info("Received event: " + json.dumps(event))
                  detail = event['detail']
                  # print("event:",event)
                  timestamp = datetime.now().isoformat()
                  event_time = event['time']
                  
                  model_package_arn = detail.get('ModelPackageArn', 'N/A')
                  # modelstage = detail.get('ModelLifeCycle', {}).get('Stage', 'N/A') if detail.get('ModelLifeCycle', {}) else "N/A"
                  
                  # Define the primary key
                  key = {
                      'modelpackagearn': model_package_arn,
                      # 'modelstage': modelstage
                  }
                  
                  # Get ModelCard information from describe_model_package
                  response = sagemaker_client.describe_model_package(ModelPackageName=model_package_arn)
                  model_card = response.get('ModelCard', {})
                  logger.info(f"Model Card: {json.dumps(model_card, indent=2)}")
                  model_card_content = json.loads(model_card.get('ModelCardContent', '{}'))
                  
                  # Extract information from model_card_content
                  business_details = model_card_content.get('business_details', {})
                  intended_uses = model_card_content.get('intended_uses', {})
                  additional_info = model_card_content.get('additional_information', {})
                  custom_details = model_card_content.get('custom_details', {})
                  model_overview = model_card_content.get('model_overview', {})
                  custom_details = additional_info.get('custom_details',{})
                  evaluation_details =  model_card_content.get('evaluation_details', [])

                  item = {
                      'modelpackagearn': model_package_arn,
                      # cfr https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModelPackage.html#sagemaker-CreateModelPackage-request-ModelApprovalStatus
                      'modelapprovalstatus': detail.get('ModelApprovalStatus', 'N/A'),
                      'creationtime': datetime.fromtimestamp(detail.get('CreationTime')/1000).strftime("%Y-%m-%dT%H:%M:%S.%f") if detail.get('CreationTime') else 'N/A',
                      'eventtime': event_time,
                      'eventtype': event.get('detail-type', 'N/A'),
                      'usecaseid': custom_details.get('UseCaseId', 'N/A'),
                      'usecasename': custom_details.get('UseCaseName', 'N/A'),
                      'usecasestage': custom_details.get('UseCaseStage', 'N/A'),
                      'modelpackagegroupname': detail.get('ModelPackageGroupName', 'N/A'),
                      'modelpackageversion': detail.get('ModelPackageVersion', 'N/A'),
                      'modelowner': model_overview.get('model_creator', 'N/A'),
                      'modeldescription': model_overview.get('description', 'N/A'),
                      'modellob': business_details.get('line_of_business', 'N/A'),
                      'modelproject': business_details.get('purpose_of_model', 'N/A'),
                      # cfr https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-staging-construct-set-up.html
                      'modellifecycledevstatus': detail.get('ModelLifeCycle', {}).get('StageStatus', 'N/A')  if detail.get('ModelLifeCycle', {}) and detail.get('ModelLifeCycle', {}).get('Stage', 'N/A') == "Development" else "N/A",
                      'modellifecycleteststatus': detail.get('ModelLifeCycle', {}).get('StageStatus', 'N/A')  if detail.get('ModelLifeCycle', {}) and detail.get('ModelLifeCycle', {}).get('Stage', 'N/A') == "Staging" else "N/A",
                      'modellifecycleprodstatus': detail.get('ModelLifeCycle', {}).get('StageStatus', 'N/A')  if detail.get('ModelLifeCycle', {}) and detail.get('ModelLifeCycle', {}).get('Stage', 'N/A') == "Production" else "N/A",
                      # 'modelstatus': detail.get('ModelLifeCycle', {}).get('StageStatus', 'N/A')  if detail.get('ModelLifeCycle', {}) else "N/A",
                      'modelrisk': intended_uses.get('risk_rating', 'N/A'),
                      'modelvalidationmetrics': str(evaluation_details[0]) if len(evaluation_details)>0 else "N/A",
                      # 'modelmonitormetrics': json.dumps(detail.get('ModelMetrics', {})),
                      'modelaudittimestamp': timestamp,
                      # 'source': event.get('source', 'N/A'),
                      # 'region': event.get('region', 'N/A'),
                      # 'account': event.get('account', 'N/A'),
                  }
                  
                  # # Add any additional attributes from the detail
                  # for k, v in detail.items():
                      # if k.lower() not in item and k not in ['ModelPackageName', 'EventTime']:
                          # item[k] = str(v)
                  
                  # Combine the key and item data
                  full_item = {**key, **item}
                  # print(full_item)
                  
                  # Try to retrieve the item if it exists
                  try:
                      # response = table.get_item(Key=key)
                      response = table.query( 
                                  KeyConditionExpression=
                                                          # Key('modelstage').eq(modelstage) &
                                                        Key('modelpackagearn').eq(model_package_arn)
                                  )
                      # print("ITEM QUERY RESPONSE:",response)
                      if 'Item' in response:
                          # Item exists, update it
                          update_expression = "SET " + ", ".join(f"#{k}=:{k}" for k in item.keys())

                          # Define expression_attribute_values
                          expression_attribute_values = {f":{k}": v for k, v in item.items()}

                          # Define expression_attribute_names
                          expression_attribute_names = {f"#{k}": k for k in item.keys()}

                          table.update_item(
                              Key=key,
                              UpdateExpression=update_expression,
                              ExpressionAttributeValues=expression_attribute_values,
                              ExpressionAttributeNames=expression_attribute_names
                          )
                          action = "updated"
                      else:
                          # Item doesn't exist, create it
                          table.put_item(Item=full_item)
                          action = "created"
                  except ClientError as e:
                      if e.response['Error']['Code'] == 'ResourceNotFoundException':
                          # Table doesn't exist
                          print(f"Table {table.name} does not exist.")
                          raise
                      else:
                          # Something else has gone wrong
                          raise
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(f'Event details successfully {action} in DynamoDB')
                  }
              # except Exception as e:
              #     print(f"Error: {str(e)}")
              #     return {
              #         'statusCode': 500,
              #         'body': json.dumps('Error processing the event')
              #     }

      Runtime: python3.12
      Timeout: 30
      MemorySize: 128

  MetricsCollectorRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: "EventBridge rule to trigger Lambda function every 15 minutes"
      ScheduleExpression: "rate(15 minutes)"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt MetricsCollectorFunction.Arn
          Id: "TargetMetricsCollectorFunction"

  ModelPackageStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ModelPackageStateChangeRule
      Description: "Rule to capture SageMaker Model Package state changes"
      EventPattern:
        source:
          - "aws.sagemaker"
        detail-type:
          - "SageMaker Model Package State Change"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt ModelPackageStateChangeFunction.Arn
          Id: "ModelPackageStateChangeFunction"


  PermissionForEventsToInvokeMetricsCollector: 
    Type: 'AWS::Lambda::Permission'
    Properties: 
      FunctionName: !Ref MetricsCollectorFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt MetricsCollectorRule.Arn

  PermissionForEventsToInvokeModelPackageStateChange:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ModelPackageStateChangeFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ModelPackageStateChangeRule.Arn

# Athena Catalog
  AthenaDataCatalog:
    Type: 'AWS::Athena::DataCatalog'
    Properties:
      Description: Create data catalog entry with athena connector to DynamoDB
      Name: dynamodb-athena-connector-datasource
      Type: LAMBDA
      Parameters:
        function: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AthenaCatalogName}'

# QuickSight Athena DataSource
  QuickSightAthenaDataSource:
    Type: AWS::QuickSight::DataSource
    Properties:
      AwsAccountId: !Ref AWS::AccountId
      DataSourceId: my-athena-ddb-datasource
      Name: Athena Data Source for DynamoDB
      Type: ATHENA
      DataSourceParameters:
        AthenaParameters:
          WorkGroup: primary
      Permissions:
        - Principal: !Sub arn:aws:quicksight:${AWS::Region}:${AWS::AccountId}:user/default/${QuickSightUserName}
          Actions:
            - quicksight:UpdateDataSourcePermissions
            - quicksight:DescribeDataSource
            - quicksight:DescribeDataSourcePermissions
            - quicksight:PassDataSource
            - quicksight:UpdateDataSource
            - quicksight:DeleteDataSource
      SslProperties:
        DisableSsl: false
      # Tags:
        # - Key: Environment
          # Value: Production

  ModelPackageStateChangesTableQuicksightDataset:
    Type: AWS::QuickSight::DataSet
    DependsOn: QuickSightAthenaDataSource
    Properties: 
      AwsAccountId: !Ref 'AWS::AccountId'
      DataSetId: Model-Package-State-Changes-Table-Quicksight-Dataset
      Name: Model-Package-State-Changes-Table-Quicksight-Dataset
      ImportMode: DIRECT_QUERY
      Permissions: 
        - Principal: !Sub arn:aws:quicksight:${AWS::Region}:${AWS::AccountId}:user/default/${QuickSightUserName}
          Actions:
            - quicksight:DeleteDataSet
            - quicksight:CreateIngestion
            - quicksight:CancelIngestion
            - quicksight:DescribeDataSet
            - quicksight:DescribeDataSetPermissions
            - quicksight:PassDataSet
            - quicksight:DescribeIngestion
            - quicksight:ListIngestions
            - quicksight:UpdateDataSetPermissions
            - quicksight:UpdateDataSet
      PhysicalTableMap:
        SourceTable:
          RelationalTable:
            DataSourceArn: !GetAtt QuickSightAthenaDataSource.Arn
            Catalog: !Ref AthenaDataCatalog
            Schema: "default"
            Name: !Ref ModelPackageStateChangesTable
            InputColumns:
            - Name: modelpackagearn
              Type: STRING
            - Name: modelapprovalstatus
              Type: STRING
            - Name: eventtime
              Type: STRING
            - Name: creationtime
              Type: STRING
            - Name: usecaseid
              Type: STRING
            - Name: usecasename
              Type: DECIMAL
            - Name: usecasestage
              Type: STRING
            - Name: modelpackagegroupname
              Type: STRING
            - Name: modelpackageversion
              Type: STRING
            - Name: modelowner
              Type: STRING
            - Name: modeldescription
              Type: STRING
            - Name: modellob
              Type: STRING
            - Name: modelproject
              Type: STRING
            # - Name: modelstage
              # Type: STRING
            # - Name: modelstatus
              # Type: STRING
            - Name: modellifecycledevstatus
              Type: STRING
            - Name: modellifecycleteststatus
              Type: STRING
            - Name: modellifecycleprodstatus
              Type: STRING
            - Name: modelrisk
              Type: STRING
            - Name: modelvalidationmetrics
              Type: STRING
            # - Name: modelmonitormetrics
              # Type: STRING
            - Name: modelaudittimestamp
              Type: STRING
            # - Name: source
              # Type: STRING
            # - Name: region
              # Type: STRING
            # - Name: account
              # Type: STRING
      LogicalTableMap:
        LogicalTable:
          Alias: MyLogicalTable
          Source:
            PhysicalTableId: SourceTable

  ModelMetricsTableQuicksightDataset:
    Type: AWS::QuickSight::DataSet
    DependsOn: QuickSightAthenaDataSource
    Properties: 
      AwsAccountId: !Ref 'AWS::AccountId'
      DataSetId: Model-Metrics-Table-Quicksight-Dataset
      Name: Model-Metrics-Table-Quicksight-Dataset
      ImportMode: DIRECT_QUERY
      Permissions: 
        - Principal: !Sub arn:aws:quicksight:${AWS::Region}:${AWS::AccountId}:user/default/${QuickSightUserName}
          Actions:
            - quicksight:DeleteDataSet
            - quicksight:CreateIngestion
            - quicksight:CancelIngestion
            - quicksight:DescribeDataSet
            - quicksight:DescribeDataSetPermissions
            - quicksight:PassDataSet
            - quicksight:DescribeIngestion
            - quicksight:ListIngestions
            - quicksight:UpdateDataSetPermissions
            - quicksight:UpdateDataSet
      PhysicalTableMap:
        SourceTable:
          RelationalTable:
            DataSourceArn: !GetAtt QuickSightAthenaDataSource.Arn
            Catalog: !Ref AthenaDataCatalog
            Schema: "default"
            Name: !Ref MetricsTable
            InputColumns:
            - Name: endpointarn
              Type: STRING
            - Name: AccountId
              Type: STRING
            - Name: Accuracy
              Type: DECIMAL
            - Name: CPUUtilization
              Type: DECIMAL
            - Name: DiskUtilization
              Type: DECIMAL
            - Name: EndpointName
              Type: STRING
            - Name: F2Score
              Type: DECIMAL
            - Name: Invocations
              Type: DECIMAL
            - Name: ModelLatency
              Type: DECIMAL
            - Name: Precision
              Type: DECIMAL
            - Name: Timestamp
              Type: DECIMAL
            - Name: TotalViolations
              Type: DECIMAL
      LogicalTableMap:
        LogicalTable:
          Alias: MyMetricsLogicalTable
          Source:
            PhysicalTableId: SourceTable


# Update QuickSight Policy
  InvokeFunctionInlinePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: InvokeFunctionInlinePolicy
      RoleName: aws-quicksight-service-role-v0
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: 
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AthenaCatalogName}

  SpillBucketInlinePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: SpillBucketInlinePolicy
      RoleName: aws-quicksight-service-role-v0
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
              - 's3:GetObjectVersion'
            Resource: 
              - Fn::Sub:
                - arn:${AWS::Partition}:s3:::${bucketName}
                - bucketName:
                    Ref: S3Bucket
              - Fn::Sub:
                - arn:${AWS::Partition}:s3:::${bucketName}/*
                - bucketName:
                    Ref: S3Bucket

  CrossAccountCloudwatchSharingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'SageMakerGovCrossAccountCloudwatchMonitoring'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchCrossAccountSharingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:GetMetricData'
                  - 'cloudwatch:ListMetrics'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:GetMetricStream'
                Resource: '*'


Outputs:
  MetricsCollectorFunctionArn:
    Description: "ARN of the Metrics Collector Lambda function"
    Value: !GetAtt MetricsCollectorFunction.Arn
  ModelPackageStateChangeFunctionArn:
    Description: "ARN of the Model Package State Change Lambda function"
    Value: !GetAtt ModelPackageStateChangeFunction.Arn
  MetricsCollectorRuleArn:
    Description: "ARN of the Metrics Collector EventBridge rule"
    Value: !GetAtt MetricsCollectorRule.Arn
  ModelPackageStateChangeRuleArn:
    Description: "ARN of the ModelPackage State Change Rule"
    Value: !GetAtt ModelPackageStateChangeRule.Arn
  CrossAccountCloudwatchRoleArn:
    Description: ARN of the cross-account sharing role
    Value: !GetAtt CrossAccountCloudwatchSharingRole.Arn

    
